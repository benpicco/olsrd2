include(CheckCCompilerFlag)

# define a function that checks if a certain compiler flag is available
# use it if it is available, display a warning if not
function(add_compiler_flag flag)
    check_c_compiler_flag(${flag} test${flag})
    if (${test${flag}})
        ADD_DEFINITIONS(${flag})
    endif()
endfunction(add_compiler_flag)

# allow to remove parts of the logging/helptext for smaller executable
IF (OONF_REMOVE_DEBUG_LOGGING)
    ADD_DEFINITIONS(-DREMOVE_LOG_DEBUG)
ENDIF (OONF_REMOVE_DEBUG_LOGGING)
IF (OONF_REMOVE_INFO_LOGGING)
    ADD_DEFINITIONS(-DREMOVE_LOG_INFO)
ENDIF (OONF_REMOVE_INFO_LOGGING)
IF (OONF_REMOVE_WARN_LOGGING)
    ADD_DEFINITIONS(-DREMOVE_LOG_WARN)
ENDIF (OONF_REMOVE_WARN_LOGGING)

IF (OONF_REMOVE_HELPTEXT)
    ADD_DEFINITIONS(-DREMOVE_HELPTEXT)
ENDIF(OONF_REMOVE_HELPTEXT)

# set preprocessor variables for level of root access the app needs
IF (OONF_NEED_ROOT)
    ADD_DEFINITIONS(-DNEED_ROOT)
ENDIF (OONF_NEED_ROOT)

IF (OONF_NEED_ROUTING)
    ADD_DEFINITIONS(-DNEED_ROUTING)
ENDIF(OONF_NEED_ROUTING)

# OS-specific settings
IF(ANDROID OR WIN32)
    # Android and windows don't compile well with c99
    ADD_DEFINITIONS(-std=gnu99)
ELSE(ANDROID OR WIN32)
    # everything else does
    ADD_DEFINITIONS(-std=c99 -D_XOPEN_SOURCE=700 -D_BSD_SOURCE -D__BSD_VISIBLE -D_DARWIN_C_SOURCE -D__KERNEL_STRICT_NAMES)
ENDIF (ANDROID OR WIN32)

# default configuration file
IF (NOT EXISTS ${OONF_DEFAULT_CONF})
  # generate OLSRd default config file
  IF(WIN32)
    # windows default config file is in the same directory,
    # it has the same name as the executable, just replaced the .exe
    # with .conf 
    string(REPLACE ".exe" ".conf" OONF_DEFAULT_CONF "${OONF_EXE}")
  ELSE(WIN32)
    # unix default config file is /etc/<executable-name>.conf
    set (OONF_DEFAULT_CONF "/etc/${OONF_EXE}.conf")
  ENDIF(WIN32)
ENDIF()

# add some necessary additions for win32
IF (WIN32)
    ADD_DEFINITIONS(-D_WIN32_WINNT=0x0502)
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-auto-import")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--export-all-symbols")
ENDIF(WIN32)

# set compiler flags that are supported
add_compiler_flag(-finline-functions-called-once)
add_compiler_flag(-funit-at-a-time)
add_compiler_flag(-fearly-inlining)
add_compiler_flag(-fno-strict-aliasing)
add_compiler_flag(-finline-limit=350)
add_compiler_flag(-Wstrict-overflow=5)
add_compiler_flag(-fvisibility=hidden)

add_compiler_flag(-Wall)
add_compiler_flag(-Wextra)
add_compiler_flag(-Wold-style-definition)
add_compiler_flag(-Wdeclaration-after-statement)
add_compiler_flag(-Wmissing-prototypes)
add_compiler_flag(-Wstrict-prototypes)
add_compiler_flag(-Wmissing-declarations)
add_compiler_flag(-Wsign-compare)
add_compiler_flag(-Waggregate-return)
add_compiler_flag(-Wmissing-noreturn)
add_compiler_flag(-Wmissing-format-attribute)
add_compiler_flag(-Wno-multichar)
add_compiler_flag(-Wno-deprecated-declarations)
add_compiler_flag(-Wendif-labels)
add_compiler_flag(-Wwrite-strings)
add_compiler_flag(-Wbad-function-cast)
add_compiler_flag(-Wpointer-arith)
add_compiler_flag(-Wno-cast-qual)
add_compiler_flag(-Wshadow)
add_compiler_flag(-Wsequence-point)
add_compiler_flag(-Wpointer-arith)
add_compiler_flag(-Wnested-externs)
add_compiler_flag(-Winline)
add_compiler_flag(-Wdisabled-optimization)
add_compiler_flag(-Wformat)
add_compiler_flag(-Wformat-security)

# check for link time optimization
check_c_compiler_flag("-flto" test_lto)
string(COMPARE NOTEQUAL ${CMAKE_BUILD_TYPE} "Debug" IS_NOT_DEBUG)
if (${test_lto} AND ${IS_NOT_DEBUG})
    ADD_DEFINITIONS(-flto -fuse-linker-plugin)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto")
    SET(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -flto")
endif()
